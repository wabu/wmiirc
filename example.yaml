#
# High-level wmii configuration.
#
# Ruby code in this file has access
# to a CONFIG constant which contains
# the data in this configuration file.
#

##
# A list of configuration files (partials) to import before
# evaluating this configuration file.  Imported partials
# may import other partials, recursively.  The contents of
# each successive partial are merged with the previous one.
#
import:

##
# Arbitrary preferences.
#
prefer:
  terminal:
  browser:
  editor:
  filer:

##
# Appearance settings.
#
display:

  ##
  # Where to display the horizontal status bar?
  #
  # Possible choices are "top" and "bottom".
  #
  bar:

  ##
  # Font to use in all text drawn by wmii.
  #
  font:

  ##
  # Thickness of client border (measured in pixels).
  #
  border:

  ##
  # Number of seconds a notice should be displayed.
  #
  notice:

  ##
  # Color schemes for everything drawn by wmii.
  #
  #   <scheme>: "<text> <background> <border>"
  #
  # You can find more color schemes here:
  #
  #   http://wmii.suckless.org/themes
  #
  # Unlike the other parameters in this section, the
  # "desktop" parameter only accepts a single color:
  #
  #   desktop: "<color>"
  #
  color:
    desktop:
    focus:
    normal:
    error:
    notice:
    success:

  ##
  # Settings for columns drawn by wmii.
  #
  #   mode: <the wmii "colmode" setting>
  #   rule: <the wmii "colrules" setting>
  #
  column:

  ##
  # Mapping of clients to views they must appear on.
  #
  #   - <client props regular expression> : <tags to apply>
  #
  # These mappings are processed in top-to-bottom order.
  # Processing stops after the first matching mapping is applied.
  #
  client:

  ##
  # Status bar applets.
  #
  #   <name of your status bar applet>:
  #
  #       refresh:  <Number of seconds to wait before updating the
  #                  label.  To disable automatic refreshing, give
  #                  this parameter a `nil` value by omitting this
  #                  parameter completely or by omitting its value.>
  #
  #       script:   <Ruby code to evaluate in the Wmiirc::Status
  #                  object that corresponds to this definition.>
  #
  #       label:    <Ruby code whose result is displayed as the
  #                  content.  This code is placed inside a
  #                  label() method in the Wmiirc::Status object
  #                  that corresponds to this definition.>
  #
  #       mouse_action:
  #         <mouse event>: <name of action>
  #
  # You can refresh a particular status bar applet in Ruby using:
  #
  #   Status["name of your status bar applet"].refresh
  #
  # The horizontal order in which these applets appear on the status
  # bar reflects the vertical order in which they are defined below.
  #
  status:

##
# Interaction settings.
#
control:

  ##
  # Internal scripts.
  #
  #   <action name>: <Ruby code to execute>
  #
  action:

  ##
  # Event handlers.
  #
  #   <event name>: <Ruby code to execute>
  #
  # The Ruby code has access to an "argv" variable which
  # is a list of arguments that were passed to the event.
  #
  # Keep in mind that these event handlers block the
  # wmiirc event loop---meaning that no new events are
  # received and processed until the current one has been
  # fully handled.  So try to keep them short and quick.
  #
  # If your event handler needs to perform a
  # long-running operation, then be sure to
  # wrap that operation inside a Ruby thread.
  #
  event:

  ##
  # Mapping from X mouse codes to event names.
  #
  mouse:

  ##
  # Keyboard settings.
  #
  keyboard:

    ##
    # The wmii "grabmod" setting.
    #
    grabmod:

  ##
  # Keyboard shortcuts.
  #
  #   <key sequence>: <name of action>
  #
  # A key sequence may contain ${...} expressions which
  # are replaced with the value corresponding to '...' in
  # the "control:keyboard" section of this configuration.
  #
  # For example, if the "control:keyboard" section was:
  #
  #   control:
  #     keyboard:
  #       foo: Mod4
  #       bar: y
  #
  # and the following key sequence was used:
  #
  #   ${foo}-${bar},${bar}
  #
  # then after ${...} expression replacement,
  # that key sequence would appear like this:
  #
  #   Mod4-y,y
  #
  keyboard_action:

##
# Arbitrary logic to execute either before or after processing this file.  Any
# number of "before" and "after" subsections may be defined within this section.
#
#   script:
#     - before: <Ruby code to execute before processing this file>
#     - after:  <Ruby code to execute after processing this file>
#     # ...
#
script:
