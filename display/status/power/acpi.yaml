#--
# Copyright protects this work.
# See LICENSE file for details.
#++

import:
  - display/status

display:
  status:
    acpi:
      battery: BAT1   # can be overwritten in config.yaml
      refresh: 15

      script: |
        BAT = @definition['battery']
        LEVELS = {:high => 80, :low => 10, :critical => 5}
        MESSAGES = {:low => "Battery LOW", :critical => "Battery CRITICAL"}
        @last_message = :high # no message

        BAT_INFO_FILE = "/proc/acpi/battery/#{BAT}/info"
        BAT_STATE_FILE = "/proc/acpi/battery/#{BAT}/state"

        def exist?
          File.exist? BAT_INFO_FILE and File.exist? BAT_STATE_FILE
        end

        def read
          @bat_info = IO.read(BAT_INFO_FILE)
          @bat_state = IO.read(BAT_STATE_FILE)
        end

        def present?
          bat_present = @bat_info[/present:\s*([a-z]+)/,1]
          (bat_present == 'yes')
        end

        def state
          @bat_state[/charging state:\s*([a-z]+)/,1]
        end

        def percent
          last_full_capacity = @bat_info[/last full capacity:\s*([0-9]+)/, 1]
          remaining_capacity = @bat_state[/remaining capacity:\s*([0-9]+)/, 1]
          ((remaining_capacity.to_f / last_full_capacity.to_f) * 100).to_i
        end

        def level
          case
            when percent < LEVELS[:critical] then :critical
            when percent < LEVELS[:low] then :low
            when percent > LEVELS[:high] then :high
          end
        end

        def color
          case state
            when "charged" then CONFIG['display']['color']['normal'] 
            when "charging" then CONFIG['display']['color']['focus'] 
            when "discharging" then case level
                when :critical then CONFIG['display']['color']['error']
                when :low then CONFIG['display']['color']['notice']
                when :high then CONFIG['display']['color']['success']
              end
            else CONFIG['display']['color']['notice']
            end
        end

        def message
          current = level || :high
          if LEVELS[current] < LEVELS[@last_message]
            xmessage = MESSAGES[current]
          end
          @last_message = current
          return xmessage
        end

      label: |
        read
        if present?
          symbol = case state
            when "charged" then "="
            when "charging" then "^"
            when "discharging" then "v"
            else "?"
          end
          xmessage = message
          if xmessage
            `xkbbell -force`
            dialog xmessage
          end
          [color, symbol, [percent,99].min.to_s+'%', symbol]
        end

      mouse_action:
        left_click: show_acpi_stats

control:
  action:
    show_acpi_stats: |
      dialog `acpi`
