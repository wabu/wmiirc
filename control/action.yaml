script:
  - before: |
      DETACHED_TAG  = '|'
      ZOOMED_SUFFIX = /~(\d+)$/

      # keep track of most recently focused view
      $last_view = nil

      class Rumai::View
        alias __focus__ focus

        def focus
          $last_view = self.class.curr
          __focus__
        end
      end

  - after: |
      action 'rehash'

control:
  action:

    reload: |
      # reload this wmii configuration
      Wmiirc::Loader.reload

    rehash: |
      # scan for available programs and actions
      @programs = find_programs(ENV['PATH'].squeeze(':').split(':'))

    clear: |
      # kill all currently open clients

      # firefox's restore session feature does not
      # work unless the whole process is killed.
      system 'killall firefox firefox-bin thunderbird thunderbird-bin'
      system 'killall chromium-browser'

      # gnome-panel refuses to die by any other means
      system 'killall -s TERM gnome-panel'

      Thread.pass until clients.each do |c|
        begin
          c.focus # XXX: client must be on current view in order to be killed
          c.kill
        rescue
          # ignore
        end
      end.empty?

    kill: |
      # kill the window manager only; do not touch the clients!
      fs.ctl.write 'quit'

    quit: |
      # kill both clients and window manager
      action 'clear'
      action 'kill'

    #-------------------------------------------------------------------------
    # focus
    #-------------------------------------------------------------------------

    focus_above_client: |
      curr_view.select(:up) rescue nil

    focus_below_client: |
      curr_view.select(:down) rescue nil

    focus_left_client: |
      curr_view.select(:left) rescue nil

    focus_right_client: |
      curr_view.select(:right) rescue nil

    focus_floating_area_toggle: |
      curr_view.select(:toggle)

    focus_previous_view: |
      prev_view.focus

    focus_next_view: |
      next_view.focus

    focus_most_recently_focused_view: |
      $last_view.focus if $last_view

    # focus the view whose index or name equals the pressed number
    focus_view_1:  focus_view tags[0] || 1
    focus_view_2:  focus_view tags[1] || 2
    focus_view_3:  focus_view tags[2] || 3
    focus_view_4:  focus_view tags[3] || 4
    focus_view_5:  focus_view tags[4] || 5
    focus_view_6:  focus_view tags[5] || 6
    focus_view_7:  focus_view tags[6] || 7
    focus_view_8:  focus_view tags[7] || 8
    focus_view_9:  focus_view tags[8] || 9
    focus_view_10: focus_view tags[9] || 10

    # focus the view whose name begins with the pressed letter
    focus_view_a: t = tags.grep(/^a/i).first and focus_view(t)
    focus_view_b: t = tags.grep(/^b/i).first and focus_view(t)
    focus_view_c: t = tags.grep(/^c/i).first and focus_view(t)
    focus_view_d: t = tags.grep(/^d/i).first and focus_view(t)
    focus_view_e: t = tags.grep(/^e/i).first and focus_view(t)
    focus_view_f: t = tags.grep(/^f/i).first and focus_view(t)
    focus_view_g: t = tags.grep(/^g/i).first and focus_view(t)
    focus_view_h: t = tags.grep(/^h/i).first and focus_view(t)
    focus_view_i: t = tags.grep(/^i/i).first and focus_view(t)
    focus_view_j: t = tags.grep(/^j/i).first and focus_view(t)
    focus_view_k: t = tags.grep(/^k/i).first and focus_view(t)
    focus_view_l: t = tags.grep(/^l/i).first and focus_view(t)
    focus_view_m: t = tags.grep(/^m/i).first and focus_view(t)
    focus_view_n: t = tags.grep(/^n/i).first and focus_view(t)
    focus_view_o: t = tags.grep(/^o/i).first and focus_view(t)
    focus_view_p: t = tags.grep(/^p/i).first and focus_view(t)
    focus_view_q: t = tags.grep(/^q/i).first and focus_view(t)
    focus_view_r: t = tags.grep(/^r/i).first and focus_view(t)
    focus_view_s: t = tags.grep(/^s/i).first and focus_view(t)
    focus_view_t: t = tags.grep(/^t/i).first and focus_view(t)
    focus_view_u: t = tags.grep(/^u/i).first and focus_view(t)
    focus_view_v: t = tags.grep(/^v/i).first and focus_view(t)
    focus_view_w: t = tags.grep(/^w/i).first and focus_view(t)
    focus_view_x: t = tags.grep(/^x/i).first and focus_view(t)
    focus_view_y: t = tags.grep(/^y/i).first and focus_view(t)
    focus_view_z: t = tags.grep(/^z/i).first and focus_view(t)

    #-------------------------------------------------------------------------
    # move
    #-------------------------------------------------------------------------

    move_grouping_up: |
      grouping.each {|c| c.send(:up) rescue nil }

    move_grouping_down: |
      grouping.each {|c| c.send(:down) rescue nil }

    move_grouping_left: |
      grouping.each {|c| c.send(:left) rescue nil }

    move_grouping_right: |
      grouping.each {|c| c.send(:right) rescue nil }

    float_grouping_toggle: |
      grouping.each {|c| c.send(:toggle) rescue nil }

    kill_all_clients_in_grouping: |
      grouping.each {|c| c.kill }

    move_grouping_to_view_from_menu: |
      #
      # Changes the tag (according to a menu choice) of
      # each grouped client and returns the chosen tag.
      #
      # The +tag -tag idea is from Jonas Pfenniger:
      #
      #   http://zimbatm.oree.ch/articles/2006/06/15/wmii-3-and-ruby
      #
      choices = tags.map {|t| [t, "+#{t}", "-#{t}"] }.flatten

      if target = key_menu(choices, 'tag as:', :tag)
        grouping.each do |c|
          case target
          when /^\+/ then c.tag $'
          when /^\-/ then c.untag $'
          else c.tags = target
          end
        end
      end

    # move grouping to the view whose index or name equals the pressed number
    move_grouping_to_view_1:  grouping.each {|c| c.tags = tags[0] || 1  }
    move_grouping_to_view_2:  grouping.each {|c| c.tags = tags[1] || 2  }
    move_grouping_to_view_3:  grouping.each {|c| c.tags = tags[2] || 3  }
    move_grouping_to_view_4:  grouping.each {|c| c.tags = tags[3] || 4  }
    move_grouping_to_view_5:  grouping.each {|c| c.tags = tags[4] || 5  }
    move_grouping_to_view_6:  grouping.each {|c| c.tags = tags[5] || 6  }
    move_grouping_to_view_7:  grouping.each {|c| c.tags = tags[6] || 7  }
    move_grouping_to_view_8:  grouping.each {|c| c.tags = tags[7] || 8  }
    move_grouping_to_view_9:  grouping.each {|c| c.tags = tags[8] || 9  }
    move_grouping_to_view_10: grouping.each {|c| c.tags = tags[9] || 10 }

    #-------------------------------------------------------------------------
    # swap
    #-------------------------------------------------------------------------

    swap_above_client: |
      curr_client.swap(:up) rescue nil

    swap_below_client: |
      curr_client.swap(:down) rescue nil

    swap_left_client: |
      curr_client.swap(:left) rescue nil

    swap_right_client: |
      curr_client.swap(:right) rescue nil

    # swap current client with the column whose index equals the pressed number
    swap_client_in_column_1:  curr_client.swap 1
    swap_client_in_column_2:  curr_client.swap 2
    swap_client_in_column_3:  curr_client.swap 3
    swap_client_in_column_4:  curr_client.swap 4
    swap_client_in_column_5:  curr_client.swap 5
    swap_client_in_column_6:  curr_client.swap 6
    swap_client_in_column_7:  curr_client.swap 7
    swap_client_in_column_8:  curr_client.swap 8
    swap_client_in_column_9:  curr_client.swap 9
    swap_client_in_column_10: curr_client.swap 10

    #-------------------------------------------------------------------------
    # client
    #-------------------------------------------------------------------------

    client_fullscreen_toggle: curr_client.fullscreen!

    kill_current_client: curr_client.kill

    #-------------------------------------------------------------------------
    # column
    #-------------------------------------------------------------------------

    apply_equal_spacing_layout_to_current_column: |
      curr_area.layout = :default

    apply_equal_spacing_layout_to_all_columns: |
      curr_view.columns.each do |a|
        a.layout = :default
      end

    apply_stacked_layout_to_current_column: |
      curr_area.layout = :stack

    apply_stacked_layout_to_all_columns: |
      curr_view.columns.each do |a|
        a.layout = :stack
      end

    apply_maximized_layout_to_current_column: |
      curr_area.layout = :max

    apply_maximized_layout_to_all_columns: |
      curr_view.columns.each do |a|
        a.layout = :max
      end

    # apply stacking layout with the pressed number of columns
    apply_stacked_layout_to_all_columns_1: curr_view.arrange_in_stacks 1
    apply_stacked_layout_to_all_columns_2: curr_view.arrange_in_stacks 2
    apply_stacked_layout_to_all_columns_3: curr_view.arrange_in_stacks 3
    apply_stacked_layout_to_all_columns_4: curr_view.arrange_in_stacks 4
    apply_stacked_layout_to_all_columns_5: curr_view.arrange_in_stacks 5
    apply_stacked_layout_to_all_columns_6: curr_view.arrange_in_stacks 6
    apply_stacked_layout_to_all_columns_7: curr_view.arrange_in_stacks 7
    apply_stacked_layout_to_all_columns_8: curr_view.arrange_in_stacks 8
    apply_stacked_layout_to_all_columns_9: curr_view.arrange_in_stacks 9
    apply_stacked_layout_to_all_columns_0: curr_view.arrange_in_stacks 9999 # one client per column

    #-------------------------------------------------------------------------
    # group
    #-------------------------------------------------------------------------

    toggle_current_client_from_grouping: |
      curr_client.group!

    add_clients_in_current_area_to_grouping: |
      curr_area.group

    remove_clients_in_current_area_from_grouping: |
      curr_area.ungroup

    add_clients_in_floating_area_to_grouping: |
      Area.floating.group

    remove_clients_in_floating_area_from_grouping: |
      Area.floating.ungroup

    add_clients_in_managed_areas_to_grouping: |
      curr_view.managed_areas.each {|a| a.group }

    remove_clients_in_managed_areas_from_grouping: |
      curr_view.managed_areas.each {|a| a.ungroup }

    add_clients_in_current_view_to_grouping: |
      curr_view.group

    remove_clients_in_current_view_from_grouping: |
      curr_view.ungroup

    invert_grouping_in_current_view: |
      curr_view.group!

    invert_grouping_in_all_views: |
      Rumai.group!

    remove_all_clients_from_grouping: |
      Rumai.ungroup

    #-------------------------------------------------------------------------
    # detach
    #-------------------------------------------------------------------------

    detach_grouping: |
      grouping.each do |c|
        c.tag DETACHED_TAG
        c.untag curr_tag
      end

    attach_most_recently_detached_client: |
      v = View.new(DETACHED_TAG)

      if v.exist? and c = v.clients.last
        c.tag curr_tag
        c.untag DETACHED_TAG
      end

    #-------------------------------------------------------------------------
    # zoom
    #-------------------------------------------------------------------------

    copy_grouping_to_temporary_view: |
      clients = grouping

      unless clients.empty?
        # determine new view
        if curr_tag =~ ZOOMED_SUFFIX
          src, num = $`, $1.to_i
          dst = "#{src}~#{num+1}"
        else
          dst = "#{curr_tag}~1"
        end

        # add clients to new view
        clients.each {|c| c.tag dst }

        # focus new view
        v = View.new dst
        v.focus
        v.arrange_in_grid

        # propagate focus into new view
        clients.first.focus v
      end

    restore_grouping_from_temporary_view: |
      clients = grouping

      unless clients.empty?
        src = curr_tag

        if src =~ ZOOMED_SUFFIX
          # determine new view
          dst = $`

          # remove clients from old view
          clients.each do |c|
            c.with_tags do
              delete src

              if empty?
                push dst
              else
                dst = last
              end
            end
          end

          # focus new view
          v = View.new dst
          v.focus

          # propagate focus into original view
          clients.first.focus v
        end
      end

    #-------------------------------------------------------------------------
    # arrange
    #-------------------------------------------------------------------------

    arrange_current_view_like_LarsWM: |
      curr_view.arrange_as_larswm

    arrange_current_view_in_grid: |
      curr_view.arrange_in_grid

    arrange_current_view_in_stacks_2: |
      curr_view.arrange_in_stacks 2

    arrange_current_view_in_diamond: |
      curr_view.arrange_in_diamond

    # apply grid layout with the pressed number of clients per column
    arrange_current_view_in_grid_1: curr_view.arrange_in_grid 1
    arrange_current_view_in_grid_2: curr_view.arrange_in_grid 2
    arrange_current_view_in_grid_3: curr_view.arrange_in_grid 3
    arrange_current_view_in_grid_4: curr_view.arrange_in_grid 4
    arrange_current_view_in_grid_5: curr_view.arrange_in_grid 5
    arrange_current_view_in_grid_6: curr_view.arrange_in_grid 6
    arrange_current_view_in_grid_7: curr_view.arrange_in_grid 7
    arrange_current_view_in_grid_8: curr_view.arrange_in_grid 8
    arrange_current_view_in_grid_9: curr_view.arrange_in_grid 9
    arrange_current_view_in_grid_0: curr_view.arrange_in_grid 9999 # all clients in one column

    #-------------------------------------------------------------------------
    # menu
    #-------------------------------------------------------------------------

    run_action_from_menu: |
      if choice = key_menu(actions, 'run action:', :action)
        action choice
      end

    run_program_from_menu: |
      if choice = key_menu(@programs, 'run program:', :program)
        launch choice
      end

    focus_view_from_menu: |
      if choice = key_menu(tags, 'show view:', :tag)
        focus_view choice
      end

    focus_client_from_menu: |
      if client = client_menu('show client:')
        client.focus
      end

    # Show a list of clients, and if user selects one,
    # tag it with the same tag as the current view.
    invite_client_from_menu: |
      if client = client_menu('invite client:')
        client.tag curr_tag
      end

    launch_terminal: |
      #
      # Launch a new terminal and set its
      # working directory to be the same
      # as the currently focused terminal.
      #
      work = ENV['HOME']

      label = curr_client.label.read rescue ''

      # iterate in reverse order because
      # paths are usually at end of label
      label.split(' ').reverse_each do |s|
        path = File.expand_path(s)

        if File.exist? path
          unless File.directory? path
            path = File.dirname(path)
          end

          work = path
          break
        end
      end

      require 'fileutils'
      FileUtils.cd work do
        launch CONFIG['prefer']['terminal']
      end

    launch_browser: |
      launch CONFIG['prefer']['browser']

    launch_filer: |
      launch CONFIG['prefer']['filer']

    launch_editor: |
      launch CONFIG['prefer']['editor']

